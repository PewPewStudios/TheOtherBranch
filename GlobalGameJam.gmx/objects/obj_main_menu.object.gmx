<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pulse = 0;
selected = 0;
shrinking = 0;
options = 5;
goodToPress = true;

options = 0
option_text[0] = 0

cmove = 1
if(gamepad_is_connected(0))
{
    global.player_controls[0] = 2;
}

if(gamepad_is_connected(1))
{
    global.player_controls[1] = 4;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cmove = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>goodToPress = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if gamepad_is_connected(0)
global.player_controls[0] = 2
if gamepad_is_connected(1)
global.player_controls[1] = 2

/*
if(gamepad_is_connected(0))
{
    if(gamepad_button_check_pressed(0, gp_face1))
    {
        switch(selected)
        {
            case 0:
            room = rm_game;
            break;
            case 1:
            room = rm_options;
            break;
            case 2:
            room = rm_level_design;
            break;
            case 3:
            room = rm_level_design1;
            break;
            case 4:
            room = rm_level_design1b;
            break;
            case 5:
            room = rm_level_design2;
            break;
        }
    }
    if(gamepad_axis_value(0,gp_axislv) &gt; .4 &amp;&amp; goodToPress)
    {
        if(selected &lt; options)
        {
            selected++;
            goodToPress = false;
            alarm[0] = 7.5;
        }
    }
    if(gamepad_axis_value(0,gp_axislv) &lt; -.4 &amp;&amp; goodToPress)
    {
        if(selected &gt; 0)
        {
            selected--;
            goodToPress = false;
            alarm[0] = 7.5
        }
    }
}

if(keyboard_check_pressed(vk_enter))
{
    switch(selected)
    {
        case 0:
        room = rm_game;
        break;
        case 1:
        room = rm_options;
        break;
        case 2:
        room = rm_level_design;
        break;
        case 3:
        room = rm_level_design1;
        break;
        case 4:
        room = rm_level_design1b;
        break;
        case 5:
        room = rm_level_design2;
        break;
    }
}
*/

if global.move_down[0] &gt; 0 //(keyboard_check_pressed(vk_down))
if cmove
{
cmove = 0
alarm[1] = 3
    if(selected &lt; options-1)
    {
        selected++;
    }
}
if global.move_up[0] &gt; 0 //(keyboard_check_pressed(vk_up))
if cmove
{
cmove = 0
alarm[1] = 3
    if(selected &gt; 0)
    {
        selected--;
    }
}

if hash[selected] = "multiplayer"
    {
    if global.move_left[0]
    if keyboard_check_pressed(vk_right)
        {
        global.playersPlaying++
        if global.playersPlaying = 3 global.playersPlaying = 1
        }
    if global.move_right[0]
    if keyboard_check_pressed(vk_left)
        {
        global.player_mode--
        if global.playersPlaying = 0 global.playersPlaying = 2
        }
    }
    
if hash[selected] = "playermode"
    {
    if global.move_left[0]
    if keyboard_check_pressed(vk_right)
        {
        global.player_mode++
        if global.player_mode = 3 global.player_mode = 1
        }
    if global.move_right[0]
    if keyboard_check_pressed(vk_left)
        {
        global.player_mode--
        if global.player_mode = 0 global.player_mode = 2
        }
    }
        
if hash[selected] = "para"
    {
    if keyboard_check_pressed(vk_right) || keyboard_check_pressed(vk_left)
        {
        global.parachute = !global.parachute
        }
    }

if hash[selected] = "gamemode"
    {
    if keyboard_check_pressed(vk_right)
        {
        global.game_mode++
        if global.game_mode &gt; 2 global.game_mode = 0
        }
    if keyboard_check_pressed(vk_left)
        {
        global.game_mode--
        if global.game_mode &lt; 0 global.game_mode = 2
        }
    }
    
if hash[selected] = "p1c"
    {
    if keyboard_check_pressed(vk_right)
        {
        global.player_controls[0]++
        
        }
    if keyboard_check_pressed(vk_left)
        {
        global.player_controls[0]--
        }
    if global.player_controls[0] = 2
    if !gamepad_is_connected(0)
        {
        global.player_controls[0]++
        }
    if global.player_controls[0] = 3
    if !joystick_exists(1)
        {
        global.player_controls[0]++
        }
    if global.player_controls[0] = 4
    if !joystick_exists(2)
        {
        global.player_controls[0]++
        }
    if global.player_controls[0] = global.player_controls[1] 
    &amp;&amp; global.player_controls[0] != 2
        {
        global.player_controls[0]++
        }
    
    if global.player_controls[0] &gt; 4 global.player_controls[0] = 0
    if global.player_controls[0] &lt; 0 global.player_controls[0] = 4
    }
    
if hash[selected] = "p2c"
    {
    if keyboard_check_pressed(vk_right)
        {
        global.player_controls[1]++
        }
    if keyboard_check_pressed(vk_left)
        {
        global.player_controls[1]--
        }
    if global.player_controls[1] = 2
    if !gamepad_is_connected(0)
        {
        global.player_controls[1]++
        }
    if global.player_controls[1] = 3
    if !joystick_exists(1)
        {
        global.player_controls[1]++
        }
    if global.player_controls[1] = 4
    if !joystick_exists(2)
        {
        global.player_controls[1]++
        }
    if global.player_controls[1] = global.player_controls[0] 
    &amp;&amp; global.player_controls[0] != 2
        {
        global.player_controls[1]++
        }
    
    if global.player_controls[1] &gt; 4 global.player_controls[1] = 0
    if global.player_controls[1] &lt; 0 global.player_controls[1] = 4
    }
    
if global.action[0] //global.move_jump[0] || keyboard_check_pressed(vk_enter)
    {
    if hash[selected] = "start"
        {
        room = rm_level_design
        }
    if hash[selected] = "start2"
        {
        room = rm_level2
        }
    if(hash[selected] = "start3")
    {
        room = rm_level_design;
    }
    if(hash[selected] = "start4")
    {
        room = rm_level_design1;
    }
    if(hash[selected] = "tut")
    {
        room = rm_tutorial;
    }
    if(hash[selected] = "exit")
    {
        game_end();
    }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
scr_clear_options()
scr_add_option("Start Game","start")
scr_add_option("Start Tutorial", "tut");
//scr_add_option("Players &lt;" + (global.playersPlaying+ 1)+ "&gt;", "multiplayer");
//scr_add_option("Start Tutorial","start3")
//scr_add_option("Start Level 1","start4")
//scr_add_option("Start Level 2","start2")


if global.player_mode = 1
    str = "&lt; 1 &gt;"
if global.player_mode = 2
    str = "&lt; 2 &gt;"
//scr_add_option("Players "+str,"playermode")
str = "off"
if global.parachute
str = "on"
//scr_add_option("Parachutes &lt; "+str+" &gt;","para")
//if global.game_mode = GAMEMODE_STORY
str = "Story"
if global.game_mode = GAMEMODE_CTF
str = "CTF"
if global.game_mode = GAMEMODE_RACE
str = "Race"
if global.game_mode = GAMEMODE_CONQUEST
str = "Conquest"
//scr_add_option("Game Mode &lt;"+str+"&gt;","gamemode")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//CONTROLS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//global.player_controls[0]
//0 = ARROW KEYS
//1 = WASD
//2 = GAME CONTROLLER 1
//2 = GAME CONTROLLER 2
//3 = JOYSTICK 1
//4 = JOYSTICK 2
scr_add_option("Players" + string(global.playersPlaying), "multiplayer");

if global.player_controls[0] = 0
str = "Arrow Keys"
if global.player_controls[0] = 1
str = "WASD Keys"
if global.player_controls[0] = 2
str = "Gamepad"
if global.player_controls[0] = 3
str = "Joystick 1"
if global.player_controls[0] = 4
str = "Joystick 2"


scr_add_option("Player 1: &lt;"+str+"&gt;","p1c")

if global.player_controls[1] = 0
str = "Arrow Keys"
if global.player_controls[1] = 1
str = "WASD Keys"
if global.player_controls[1] = 2
str = "Gamepad"
if global.player_controls[1] = 3
str = "Joystick 1"
if global.player_controls[1] = 4
str = "Joystick 2"


scr_add_option("Player 2: &lt;"+str+"&gt;","p2c")

scr_add_option("Exit Game","exit")


    
draw_set_font(fnt_main_menu_main);
/*

draw_pulse_text("The Other Branch", 1, .15, room_width/2, room_height/6, 4);
draw_set_font(fnt_default);
scr_check_selected(0);
draw_text(room_width/2, room_height/2, "Start Game");
scr_check_selected(1);
draw_text(room_width/2, room_height/2+64, "Options");
scr_check_selected(2);
draw_text(room_width/2, room_height/2+64*2, "Level Design Room");
scr_check_selected(3);
draw_text(room_width/2, room_height/2+64*3, "Level Design Room 1");
scr_check_selected(4);
draw_text(room_width/2, room_height/2+64*4, "Level Design Room 1B");
scr_check_selected(5);
draw_text(room_width/2, room_height/2+64*5, "Level Design Room 2");
draw_set_color(c_black);
*/
draw_set_halign(fa_center)
draw_set_valign(fa_center)
yoff = 128
for(i=0 ; i&lt;options ; i++)
    {
    draw_set_color(c_dkgray)
    if selected = i
    draw_set_color(c_gray)
    draw_rectangle(room_width/2 - 480, room_height/2 + 64 * i - 24 + yoff , room_width/2 + 480, room_height/2 + 64 * i + 24 + yoff, 0)
    draw_set_color(c_white)
    draw_text(room_width/2, room_height/2 + 64 * i + yoff, option_text[i]);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
