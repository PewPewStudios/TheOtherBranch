<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mouse</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>max_ghook_dis = 384
jumps = 0

image_speed = 0

HP = 2;
maxHP = 3;
invincible =false;

spawnX = xstart;
spawnY = ystart;

hasReleasedA = true;

holdKey = false;
hasCorrectKey = false;
key = 0;

controlled = global.controlledBy;
global.controlledBy++;
player_id = global.players
global.players++
obj_hud.player[player_id] = id

max_speed = 12

facing = 1;

can_jump = 1

//Control key mappings

move_left = 0
move_right = 0
move_jump = 0
move_up = 0
move_down = 0

if player_id = 0
    {
    keyboard_move_left = vk_left
    keyboard_move_right = vk_right
    keyboard_move_jump = vk_up
    keyboard_move_up = vk_up
    keyboard_move_down = vk_down
    keyboard_move_grap = vk_space
    }

if player_id = 1
    {
    keyboard_move_left = ord("A")
    keyboard_move_right = ord("D")
    keyboard_move_jump = ord("W")
    keyboard_move_up = ord("W")
    keyboard_move_down = ord("S")
    keyboard_move_grap = ord("C")
    }

gravity = 1
friction = .1
friction_init = friction

ghook_active = 0

//Inventory
inv_item[0] = spr_banana;
inv_item[1] = spr_banana;

ghook_dis = 32

flags = 0

vit = 10
maxvit = vit

cfire = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_jump = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invincible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if vit &lt;= 0
    {
    ghook_active = 0
    x = spawnX // obj_control.spawn_point[player_id].x
    y = spawnY //obj_control.spawn_point[player_id].y
    vit = maxvit
    }
    */
if(HP &lt;= 0)
    {
        if(holdKey)
        {
            with(key)
            {
                held = -1;
                x = xstart;
                y = ystart;
            }
            holdKey = false;
            hasCorrectKey = false;
            key = noone;
        }
        x = spawnX // obj_control.spawn_point[player_id].x
        y = spawnY
        HP = 2;
        invincible = false;
        if(global.soundFX)
        audio_play_sound(snd_death,1,0)
        ghook_active = 0
    }
scr_collisions()
scr_controls()
scr_ghook()

view_follow()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_portal_red">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nb = instance_nearest(x,y,obj_portal_blue)
cportal = 0
alarm[0] = 20
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.sprite_index = spr_health_seed)
{
    HP++;
    with(other)
    {
    instance_destroy();
    }
}
if(gamepad_is_connected(player_id))
{
    if(gamepad_button_check_pressed(player_id,global.use))
    {
        inv_item[array_length_1d(inv_item)] = other.sprite_index;
        with(other)
        {
            instance_destroy();
        }
    }
}
if(keyboard_check_pressed(ord(global.kUse)))
{
    inv_item[array_length_1d(inv_item)] = other.sprite_index;
        with(other)
        {
            instance_destroy();
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_lava">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vit = 0
if(invincible = false)
{
HP -= 2;
invincible = true
}
else
{
alarm[0] = 15;
}
/* if obj_flag.held = id
    {
    obj_flag.x = obj_flag.xstart
    obj_flag.y = obj_flag.ystart
    obj_flag.held = -1
    } */

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ground">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>repeat(4)
if point_distance(x,y,other.x,other.y) &lt; other.sprite_width/2
{
if other.x &lt; x
x-=2
if other.x &gt; x
x+=2
if other.y &gt; y
y-=2
if other.y &gt; y
y+=2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if view_current = 0
background_color = 10576679
if view_current = 1
background_color = 16761506


if ghook_active 
    {
    draw_sprite_ext(spr_hook,0,ghook_x,ghook_y,1,1,ghook_dir,c_white,1)
    
    for(i=32 ; i&lt;point_distance(x,y,ghook_x,ghook_y) ; i+=32)
        {
        dir = point_direction(x,y,ghook_x,ghook_y)
        x1 = x+lengthdir_x(32*i,dir)
        y1 = y+lengthdir_y(32*i,dir)
        draw_sprite_ext(spr_ghook_wire , 0 , x1,y1 ,1,1,dir,c_white,1 )
        }
    }
    

friction = friction_init
if(global.parachute)
{
    if keyboard_check(vk_control)
        {
        friction = speed / 3
        draw_sprite(spr_parachute,0,x,y-128)
        }
    
    if(gamepad_is_connected(player_id))
    {
        if(gamepad_button_check(player_id,gp_face2))
        {
            friction = speed / 3
        draw_sprite(spr_parachute,0,x,y-128)
        }
    }
}
/*
image_index = 0
if ghook_active 
    {
    image_index = 1
    }
    */
if !collision_circle(x + sprite_height * facing , y , 3 , obj_ground , 1 , 1)
    {
    
    }


if(player_id = 0)
draw_sprite_ext(sprite_index,image_index,x,y,1,facing,image_angle,c_white,1);

if(player_id = 1)
draw_sprite_ext(sprite_index,image_index,x,y,1,facing,image_angle,c_white,1);

if ghook_active
    {
    if(player_id = 0)
        {
        draw_set_color(c_white);
        }
    if(player_id = 1)
        {
        draw_set_color(c_blue);
        }
    draw_line(x,y,ghook_x,ghook_y)
    }
if global.game_mode = GAMEMODE_CTF
draw_sprite_ext(spr_arrow,0,x,y,1,1,point_direction(x,y,obj_flag.x,obj_flag.y),c_white,1)

if global.game_mode = GAMEMODE_STORY
if instance_exists(obj_door)
draw_sprite_ext(spr_arrow,0,x,y,1,1,point_direction(x,y,obj_door.x,obj_door.y),c_white,1)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
